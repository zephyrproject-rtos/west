name: Format check

on:
  pull_request:
    branches:
      - main
    paths:
      - '**.py'

permissions:
  contents: read

jobs:
  find-changed-files:
    runs-on: ubuntu-latest
    outputs:
      files: ${{ steps.git-diff-files.outputs.files }}
    name: Detect added and changed files

    steps:
      - uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
        with:
          fetch-depth: 0
          persist-credentials: false

      - name: Create json diff
        uses: GrantBirki/git-diff-action@7420e4d095c27bb23359787640976d60c94fd216 # v2.8.1
        id: git-diff
        with:
          base_branch: origin/main
          search_path: '**.py'
          json_diff_file_output: diff.json
          file_output_only: 'true'
          # Ignore deleted files
          git_options: '--no-color --diff-filter=d'

      - name: Convert json diff to matrix array
        id: git-diff-files
        env:
          JSON_DIFF: ${{ steps.git-diff.outputs.json-diff-path }}
        run: |
          # Github output expects oneliners, use compact mode
          files=$(cat $JSON_DIFF | jq -c -r '[.files[] | {path: .path}]')
          echo "files=$files" >> $GITHUB_OUTPUT

  ruff-format:
    needs: find-changed-files
    if: ${{ needs.find-changed-files.outputs.files != '[]' }}
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        files: ${{ fromJSON(needs.find-changed-files.outputs.files) }}

    name: Check file ${{ matrix.files.path }}
    steps:
      - uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
        with:
          persist-credentials: false

      - name: Run ruff format check for ${{ matrix.files.path }}
        id: format-check
        uses: astral-sh/ruff-action@57714a7c8a2e59f32539362ba31877a1957dded1 # v3.5.1
        # Allow the job run to pass when this step fails
        continue-on-error: true
        with:
          args: "format --check --diff"
          src: "${{ matrix.files.path }}"
          version: 0.8.1

      - name: Annotate unformatted file
        if: ${{ steps.format-check.outcome }} == 'failure'
        run: |
          JOB_URL="${GITHUB_SERVER_URL}/${GITHUB_REPOSITORY}/actions/runs/${GITHUB_RUN_ID}"
          echo "::notice file=${{ matrix.files.path }},title=Unformatted file::Consider running 'ruff format ${{ matrix.files.path }}'%0ASee $JOB_URL for more details"
